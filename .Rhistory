library(devtools)
library(webshot)
load_all()
load_all()
load_all()
load_all()
document()
build()
q()
r
R version
R.version()
version()
sessionInfo()
sessionInfo()
sessionInfo()
install.packages(mnormt)
install.packages(knirt)
install.packages("knit")
install.packages("mnormt")
sessionInfo()
library(reticulate)
library(devtools)
load_all()
document()
build()
<<<<<<< HEAD
library(DesignCTPB)
py_ini()
py_ini()
alpha_split()
=======
install.packages( "/Users/michael/Documents/GitHub/DesignCTPB_0.1.0.tar.gz")
install.packages( "/Users/michael/Documents/GitHub/DesignCTPB_0.1.0.tar.gz", repos = NULL)
library(DesignCTPB)
??DesignCTPB
??DesignCTPB
detach("package:DesignCTPB", unload = TRUE)
library(DesignCTPB)
check()
load_all()
document()
build()
load_all()
document()
load_all()
document()
check()
load_all()
document()
load_all()
load_all()
document()
check()
library(DesignCTPB)
??DesignCTPB
??DesignCTPB
??DesignCTPB
??DesignCTPB
detach("package:DesignCTPB", unload = TRUE)
library(DesignCTPB)
load_all()
document()
build()
install.packages( "/Users/michael/Documents/GitHub/DesignCTPB_0.1.0.tar.gz", repos=NULL)
library(DesignCTPB)
??DesignCTPB
??DesignCTPB
library(DesignCTPB)
detach("package:DesignCTPB", unload = TRUE)
library(DesignCTPB)
??DesignCTPB
??DesignCTPB
detach("package:DesignCTPB", unload = TRUE)
library(DesignCTPB)
??DesignCTPB
??DesignCTPB
??DesignCTPB
load_all()
document()
build()
install.packages("/Users/michael/Documents/GitHub/DesignCTPB_0.1.0.tar.gz", repos=NULL)
library(DesignCTPB)
detach("package:DesignCTPB", unload = TRUE)
library(DesignCTPB)
check()
check()
library(DesignCTPB)
??DesignCTPB
??DesignCTPB
detach("package:DesignCTPB", unload = TRUE)
library(DesignCTPB)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
configure_environment("numba")
library(reticulate)
configure_environment("numba")
py_available()
py_config()
py_available()
configure_environment("numba")
configure_environment(numba)
py_config()$python
configure_environment(py_config()$python,"numba")
configure_environment("numpy")
check()
py_ini <- function(){
reticulate::py_config()
reticulate::source_python(system.file("python","power4R.py",package="DesignCTPB"), envir = .GlobalEnv, convert = TRUE) # source python4R.py into the environment
assign(Power.sampling,  Power_sampling, envir = .GlobalEnv, inherits=TRUE) # set Power.sampling as an global function
return(Power.sampling)
}
py_ini()
#' Initiate the reticulate environment
#' @description A utility function to initiate the python environment and source the python function into the R environment and set it as global function.
#' @export
#' @examples
#'\dontrun{
#' py_ini()
#' }
py_ini <- function(){
reticulate::py_config()
reticulate::source_python(system.file("python","power4R.py",package="DesignCTPB"), envir = .GlobalEnv, convert = TRUE) # source python4R.py into the environment
assign("Power.sampling",  Power_sampling, envir = .GlobalEnv, inherits=TRUE) # set Power.sampling as an global function
return(Power.sampling)
}
py_ini()
#' Initiate the reticulate environment
#' @description A utility function to initiate the python environment and source the python function into the R environment and set it as global function.
#' @export
#' @examples
#'\dontrun{
#' py_ini()
#' }
py_ini <- function(){
reticulate::py_config()
reticulate::source_python(system.file("python","power4R.py",package="DesignCTPB"), envir = .GlobalEnv, convert = TRUE) # source python4R.py into the environment
#assign("Power.sampling",  Power_sampling, envir = .GlobalEnv, inherits=TRUE) # set Power.sampling as an global function
return(Power_sampling)
}
py_ini()
Power_sampling
check()
check()
check()
load_all()
document()
build()
install.packages("/Users/michael/Documents/GitHub/DesignCTPB_0.1.0.tar.gz", repos = NULL)
check()
Sys.setenv('_R_CHECK_SYSTEM_CLOCK_' = 0)
check()
data("res_strong")
plt_power <- res_strong$plot_power
plt_alpha <- res_strong$plot_alpha
getwd()
which R
session_info()
sessionInfo
sessionInfo()
build --compact-vignettes=gs
load_all()
docuemnt()
document()
build()
check()
load_all()
document()
build()
install.packages("/Users/michael/Documents/GitHub/DesignCTPB_0.1.0.tar.gz", repos = NULL)
library(DesignCTPB)
??DesignCTPB
??DesignCTPB
library(DesignCTPB)
detach("package:DesignCTPB", unload = TRUE)
library(DesignCTPB)
??DesignCTPB
??DesignCTPB
py_ini()
gpuVector(A)
install.packages("gpuR")
devtools::install_github("cdeterman/gpuR")
#' Initiate the reticulate environment
#' @description A utility function to initiate the python environment and source the python function into the R environment and set it as global function.
#' @return the physical address of R function Power_sampling, converted from python file "python4R.py"
#' @export
#' @examples
#'\dontrun{
#' py_ini()
#' }
py_ini <- function(){
reticulate::py_config()
reticulate::source_python(system.file("python","power4R.py",package="DesignCTPB"), envir = .GlobalEnv, convert = TRUE) # source python4R.py into the environment
reticulate::py_run_string("numba.cuda.gpus", local = TRUE, convert = TRUE)
#assign("Power.sampling",  Power_sampling, envir = .GlobalEnv, inherits=TRUE) # set Power.sampling as an global function
return(1)
}
py_ini()
#' Initiate the reticulate environment
#' @description A utility function to initiate the python environment and source the python function into the R environment and set it as global function.
#' @return the physical address of R function Power_sampling, converted from python file "python4R.py"
#' @export
#' @examples
#'\dontrun{
#' py_ini()
#' }
py_ini <- function(){
reticulate::py_config()
reticulate::source_python(system.file("python","power4R.py",package="DesignCTPB"), envir = .GlobalEnv, convert = TRUE) # source python4R.py into the environment
reticulate::py_run_string("import numba; numba.cuda.gpus", local = TRUE, convert = TRUE)
#assign("Power.sampling",  Power_sampling, envir = .GlobalEnv, inherits=TRUE) # set Power.sampling as an global function
return(1)
}
py_ini()
reticulate::py_run_string("import numba; numba.cuda.gpus", local = TRUE, convert = TRUE)
reticulate::py_run_string("import numba; numba.cuda.gpus", convert = TRUE)
py_run_string("import numba; numba.cuda.gpus", convert = TRUE)
py_run_string("import numba; numba.cuda.gpus()", convert = TRUE)
py_run_string("import numba numba.cuda.gpus", convert = TRUE)
py_run_string("import numba; numba.cuda.gpus", convert = TRUE)
a=reticulate::py_run_string("import numba; numba.cuda.gpus", convert = TRUE)
a
View(a)
py_run_string("import numba; numba.cuda.select_device(0)", convert = TRUE)
#' Initiate the reticulate environment
#' @description A utility function to initiate the python environment and source the python function into the R environment and set it as global function.
#' @return the physical address of R function Power_sampling, converted from python file "python4R.py"
#' @export
#' @examples
#'\dontrun{
#' py_ini()
#' }
py_ini <- function(){
reticulate::py_config()
reticulate::source_python(system.file("python","power4R.py",package="DesignCTPB"), envir = .GlobalEnv, convert = TRUE) # source python4R.py into the environment
reticulate::py_run_string("import numba; numba.cuda.select_device(0)", convert = TRUE)
#assign("Power.sampling",  Power_sampling, envir = .GlobalEnv, inherits=TRUE) # set Power.sampling as an global function
return("Reticulate environment has been set up successfully!")
}
py_ini()
load_all()
load_all()
document()
build()
install.packages("rhub")
library(rhub)
validate_email(email="yitaolu@uvic.ca")
devtools::build()
rhub::check_on_centos()
check()
check()
check()
check()
check()
check()
check()
devtools::build()
load_all()
library(devtools)
load_all()
document()
build()
load_all()
document()
build()
install.packages( "/Users/michael/Documents/GitHub/DesignCTPB_0.1.0.tar.gz", repos = NULL)
library(DesignCTPB)
detach("package:DesignCTPB", unload = TRUE)
library(DesignCTPB)
load_all()
document()
build()
install.packages("/Users/michael/Documents/GitHub/DesignCTPB_0.1.0.tar.gz", repos=NULL)
library(DesignCTPB)
detach("package:DesignCTPB", unload = TRUE)
library(DesignCTPB)
library(devtools)
loadz_all()
load_all()
document()
buidl()
build()
load_all()
document()
build()
>>>>>>> 667d7c4933c1ca1dd4b40f964075c5cd9faeec80
check()
