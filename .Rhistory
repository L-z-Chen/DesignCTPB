alpha_tol <- as.matrix(expand.grid(alpha1=a))
}
if(n_dim == 3){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a))
}
if(n_dim==4){
a <- 1:30/1200.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a, alpha3=a))
}
if(n_dim==5){
a <- 1:18/720.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a, alpha3=a, alpha4=a))
}
alpha_1n <- split(alpha_tol, row(alpha_tol))
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
alpha <- parallel::mclapply(alpha_1n,alpha_kernel,r, sig.lv=0.025 ,mc.cores = mc)
alpha_tol <- cbind(alpha_tol, rep(0,(length(a))^(n_dim-1)))
for(i in 1:(length(a))^(n_dim-1)){
if (is.null(alpha[[i]])){
alpha_tol[i,] <- rep(1,n_dim)
}
else{
alpha_tol[i,n_dim] <- alpha[[i]]
}
}
index <- which(alpha_tol==rep(1,n_dim))
if(!setequal(which(alpha_tol==rep(1,n_dim)), integer(0))){
alpha_tol <- alpha_tol[-index,]
}#for 2-dimensional case there is no 1 vector
nrow(alpha_tol)/10000
r <- c(1,0.999,0.005,0.001)
n_dim <- length(r)
if(n_dim==4){
a <- 1:30/1200.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a, alpha3=a))
}
alpha_1n <- split(alpha_tol, row(alpha_tol))
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
alpha <- parallel::mclapply(alpha_1n,alpha_kernel,r, sig.lv=0.025 ,mc.cores = mc)
alpha_tol <- cbind(alpha_tol, rep(0,(length(a))^(n_dim-1)))
for(i in 1:(length(a))^(n_dim-1)){
if (is.null(alpha[[i]])){
alpha_tol[i,] <- rep(1,n_dim)
}
else{
alpha_tol[i,n_dim] <- alpha[[i]]
}
}
index <- which(alpha_tol==rep(1,n_dim))
if(!setequal(which(alpha_tol==rep(1,n_dim)), integer(0))){
alpha_tol <- alpha_tol[-index,]
}#for 2-dimensional case there is no 1 vector
nrow(alpha_tol)/30^3
r
r<- c(1,0.999,0.998,0.001)
n_dim <- length(r)
if(n_dim == 2){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a))
}
if(n_dim == 3){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a))
}
if(n_dim==4){
a <- 1:30/1200.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a, alpha3=a))
}
if(n_dim==5){
a <- 1:18/720.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a, alpha3=a, alpha4=a))
}
alpha_1n <- split(alpha_tol, row(alpha_tol))
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
alpha <- parallel::mclapply(alpha_1n,alpha_kernel,r, sig.lv=0.025 ,mc.cores = mc)
alpha_tol <- cbind(alpha_tol, rep(0,(length(a))^(n_dim-1)))
for(i in 1:(length(a))^(n_dim-1)){
if (is.null(alpha[[i]])){
alpha_tol[i,] <- rep(1,n_dim)
}
else{
alpha_tol[i,n_dim] <- alpha[[i]]
}
}
index <- which(alpha_tol==rep(1,n_dim))
if(!setequal(which(alpha_tol==rep(1,n_dim)), integer(0))){
alpha_tol <- alpha_tol[-index,]
}#for 2-dimensional case there is no 1 vector
nrow(alpha_tol)/30^3
nrow(alpha_tol)
r<- c(1,0.005,0.003,0.001)
n_dim <- length(r)
if(n_dim == 2){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a))
}
if(n_dim == 3){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a))
}
if(n_dim==4){
a <- 1:30/1200.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a, alpha3=a))
}
if(n_dim==5){
a <- 1:18/720.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a, alpha3=a, alpha4=a))
}
alpha_1n <- split(alpha_tol, row(alpha_tol))
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
alpha <- parallel::mclapply(alpha_1n,alpha_kernel,r, sig.lv=0.025 ,mc.cores = mc)
alpha_tol <- cbind(alpha_tol, rep(0,(length(a))^(n_dim-1)))
for(i in 1:(length(a))^(n_dim-1)){
if (is.null(alpha[[i]])){
alpha_tol[i,] <- rep(1,n_dim)
}
else{
alpha_tol[i,n_dim] <- alpha[[i]]
}
}
index <- which(alpha_tol==rep(1,n_dim))
if(!setequal(which(alpha_tol==rep(1,n_dim)), integer(0))){
alpha_tol <- alpha_tol[-index,]
}#for 2-dimensional case there is no 1 vector
nrow(alpha_tol)/30^3
plot(alpha_tol[,1]~alpha_tol[,2])
plot(alpha_tol[,1]~alpha_tol[,3])
plot(alpha_tol[,1]~alpha_tol[,4])
plot(alpha_tol[,2]~alpha_tol[,4])
plot(alpha_tol[,3]~alpha_tol[,4])
plot(alpha_tol[,2]~alpha_tol[,3])
plot(alpha_tol[,1]~alpha_tol[,3])
plot(alpha_tol[,2]~alpha_tol[,3])
plot(alpha_tol[,4]~alpha_tol[,3])
plot(alpha_tol[,3]~alpha_tol[,4])
plot(alpha_tol[,2]~alpha_tol[,4])
r <- c(1,0.999, 0.003,0.001)
n_dim <- length(r)
if(n_dim == 2){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a))
}
if(n_dim == 3){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a))
}
if(n_dim==4){
a <- 1:30/1200.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a, alpha3=a))
}
if(n_dim==5){
a <- 1:18/720.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a, alpha3=a, alpha4=a))
}
alpha_1n <- split(alpha_tol, row(alpha_tol))
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
alpha <- parallel::mclapply(alpha_1n,alpha_kernel,r, sig.lv=0.025 ,mc.cores = mc)
alpha_tol <- cbind(alpha_tol, rep(0,(length(a))^(n_dim-1)))
for(i in 1:(length(a))^(n_dim-1)){
if (is.null(alpha[[i]])){
alpha_tol[i,] <- rep(1,n_dim)
}
else{
alpha_tol[i,n_dim] <- alpha[[i]]
}
}
index <- which(alpha_tol==rep(1,n_dim))
if(!setequal(which(alpha_tol==rep(1,n_dim)), integer(0))){
alpha_tol <- alpha_tol[-index,]
}#for 2-dimensional case there is no 1 vector
nrow(alpha_tol)/30^3
plot(alpha_tol[,1]~alpha_tol[,2])
plot(alpha_tol[,1]~alpha_tol[,3])
plot(alpha_tol[,1]~alpha_tol[,4])
r <- c(1,0.999,0.998,0.001)
n_dim <- length(r)
if(n_dim == 2){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a))
}
if(n_dim == 3){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a))
}
if(n_dim==4){
a <- 1:30/1200.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a, alpha3=a))
}
if(n_dim==5){
a <- 1:18/720.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a, alpha3=a, alpha4=a))
}
alpha_1n <- split(alpha_tol, row(alpha_tol))
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
alpha <- parallel::mclapply(alpha_1n,alpha_kernel,r, sig.lv=0.025 ,mc.cores = mc)
alpha_tol <- cbind(alpha_tol, rep(0,(length(a))^(n_dim-1)))
for(i in 1:(length(a))^(n_dim-1)){
if (is.null(alpha[[i]])){
alpha_tol[i,] <- rep(1,n_dim)
}
else{
alpha_tol[i,n_dim] <- alpha[[i]]
}
}
index <- which(alpha_tol==rep(1,n_dim))
if(!setequal(which(alpha_tol==rep(1,n_dim)), integer(0))){
alpha_tol <- alpha_tol[-index,]
}#for 2-dimensional case there is no 1 vector
nrow(alpha_tol)/30^3
plot(alpha_tol[,1]~alpha_tol[,2])
plot(alpha_tol[,1]~alpha_tol[,3])
plot(alpha_tol[,1]~alpha_tol[,4])
r <- c(1,0.00005,0.00003,0.00001)
n_dim <- length(r)
if(n_dim == 2){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a))
}
if(n_dim == 3){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a))
}
if(n_dim==4){
a <- 1:30/1200.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a, alpha3=a))
}
if(n_dim==5){
a <- 1:18/720.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a, alpha3=a, alpha4=a))
}
alpha_1n <- split(alpha_tol, row(alpha_tol))
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
alpha <- parallel::mclapply(alpha_1n,alpha_kernel,r, sig.lv=0.025 ,mc.cores = mc)
alpha_tol <- cbind(alpha_tol, rep(0,(length(a))^(n_dim-1)))
for(i in 1:(length(a))^(n_dim-1)){
if (is.null(alpha[[i]])){
alpha_tol[i,] <- rep(1,n_dim)
}
else{
alpha_tol[i,n_dim] <- alpha[[i]]
}
}
index <- which(alpha_tol==rep(1,n_dim))
if(!setequal(which(alpha_tol==rep(1,n_dim)), integer(0))){
alpha_tol <- alpha_tol[-index,]
}#for 2-dimensional case there is no 1 vector
nrow(alpha_tol)/30^3
r <- c(1,0.00005,0.000005,0.00000005)
n_dim <- length(r)
if(n_dim == 2){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a))
}
if(n_dim == 3){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a))
}
if(n_dim==4){
a <- 1:30/1200.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a, alpha3=a))
}
if(n_dim==5){
a <- 1:18/720.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a, alpha3=a, alpha4=a))
}
alpha_1n <- split(alpha_tol, row(alpha_tol))
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
alpha <- parallel::mclapply(alpha_1n,alpha_kernel,r, sig.lv=0.025 ,mc.cores = mc)
alpha_tol <- cbind(alpha_tol, rep(0,(length(a))^(n_dim-1)))
for(i in 1:(length(a))^(n_dim-1)){
if (is.null(alpha[[i]])){
alpha_tol[i,] <- rep(1,n_dim)
}
else{
alpha_tol[i,n_dim] <- alpha[[i]]
}
}
index <- which(alpha_tol==rep(1,n_dim))
if(!setequal(which(alpha_tol==rep(1,n_dim)), integer(0))){
alpha_tol <- alpha_tol[-index,]
}#for 2-dimensional case there is no 1 vector
nrow(alpha_tol)/30^3
nrow(alpha_tol)
plot(alpha_tol[,1]~alpha_tol[,2])
plot(alpha_tol[,1]~alpha_tol[,3])
plot(alpha_tol[,2]~alpha_tol[,3])
plot(alpha_tol[,2]~alpha_tol[,4])
plot(alpha_tol[,3]~alpha_tol[,4])
0.5^3
r2 <- seq(0.002,0.998,0.001)
r2 <- seq(0.002,0.998,0.001)
valid_per <- rep(0,length(r2))
for(ii in 1:length(r2)){
r <- c(1, r2[ii], 0.00000001)
n_dim <- length(r)
if(n_dim == 3){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a))
}
alpha_1n <- split(alpha_tol, row(alpha_tol))
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
alpha <- parallel::mclapply(alpha_1n,alpha_kernel,r, sig.lv=0.025 ,mc.cores = mc)
alpha_tol <- cbind(alpha_tol, rep(0,(length(a))^(n_dim-1)))
for(i in 1:(length(a))^(n_dim-1)){
if (is.null(alpha[[i]])){
alpha_tol[i,] <- rep(1,n_dim)
}
else{
alpha_tol[i,n_dim] <- alpha[[i]]
}
}
index <- which(alpha_tol==rep(1,n_dim))
if(!setequal(which(alpha_tol==rep(1,n_dim)), integer(0))){
alpha_tol <- alpha_tol[-index,]
}#for 2-dimensional case there is no 1 vector
valid_per[ii] <- nrow(alpha_tol)/30^3
}
ii
valid_per
r2 <- seq(0.002,0.998,0.01)
length(r2)
r2 <- seq(0.002,0.998,0.01)
valid_per <- rep(0,length(r2))
for(ii in 1:length(r2)){
r <- c(1, r2[ii], 0.00000001)
n_dim <- length(r)
if(n_dim == 3){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a))
}
alpha_1n <- split(alpha_tol, row(alpha_tol))
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
alpha <- parallel::mclapply(alpha_1n,alpha_kernel,r, sig.lv=0.025 ,mc.cores = mc)
alpha_tol <- cbind(alpha_tol, rep(0,(length(a))^(n_dim-1)))
for(i in 1:(length(a))^(n_dim-1)){
if (is.null(alpha[[i]])){
alpha_tol[i,] <- rep(1,n_dim)
}
else{
alpha_tol[i,n_dim] <- alpha[[i]]
}
}
index <- which(alpha_tol==rep(1,n_dim))
if(!setequal(which(alpha_tol==rep(1,n_dim)), integer(0))){
alpha_tol <- alpha_tol[-index,]
}#for 2-dimensional case there is no 1 vector
valid_per[ii] <- nrow(alpha_tol)/30^3
}
for(ii in 1:length(r2)){
r <- c(1, r2[ii], 0.00000001)
n_dim <- length(r)
if(n_dim == 3){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a))
}
alpha_1n <- split(alpha_tol, row(alpha_tol))
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
alpha <- parallel::mclapply(alpha_1n,alpha_kernel,r, sig.lv=0.025 ,mc.cores = mc)
alpha_tol <- cbind(alpha_tol, rep(0,(length(a))^(n_dim-1)))
for(i in 1:(length(a))^(n_dim-1)){
if (is.null(alpha[[i]])){
alpha_tol[i,] <- rep(1,n_dim)
}
else{
alpha_tol[i,n_dim] <- alpha[[i]]
}
}
index <- which(alpha_tol==rep(1,n_dim))
if(!setequal(which(alpha_tol==rep(1,n_dim)), integer(0))){
alpha_tol <- alpha_tol[-index,]
}#for 2-dimensional case there is no 1 vector
valid_per[ii] <- nrow(alpha_tol)/30^3
}
for(ii in 1:length(r2)){
r <- c(1, r2[ii], 0.00000001)
n_dim <- length(r)
if(n_dim == 3){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a))
}
alpha_1n <- split(alpha_tol, row(alpha_tol))
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
alpha <- parallel::mclapply(alpha_1n,alpha_kernel,r, sig.lv=0.025 ,mc.cores = mc)
alpha_tol <- cbind(alpha_tol, rep(0,(length(a))^(n_dim-1)))
for(i in 1:(length(a))^(n_dim-1)){
if (is.null(alpha[[i]])){
alpha_tol[i,] <- rep(1,n_dim)
}
else{
alpha_tol[i,n_dim] <- alpha[[i]]
}
}
index <- which(alpha_tol==rep(1,n_dim))
if(!setequal(which(alpha_tol==rep(1,n_dim)), integer(0))){
alpha_tol <- alpha_tol[-index,]
}#for 2-dimensional case there is no 1 vector
valid_per[ii] <- nrow(alpha_tol)/30^3
}
mc.cores'
=
''
mc.cores
clnum <- parallel::detectCores()
clnum <- parallel::detectCores()
r2 <- seq(0.002,0.998,0.01)
valid_per <- rep(0,length(r2))
for(ii in 1:length(r2)){
r <- c(1, r2[ii], 0.00000001)
n_dim <- length(r)
if(n_dim == 3){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a))
}
alpha_1n <- split(alpha_tol, row(alpha_tol))
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
alpha <- parallel::mclapply(alpha_1n,alpha_kernel,r, sig.lv=0.025 ,mc.cores = mc)
alpha_tol <- cbind(alpha_tol, rep(0,(length(a))^(n_dim-1)))
for(i in 1:(length(a))^(n_dim-1)){
if (is.null(alpha[[i]])){
alpha_tol[i,] <- rep(1,n_dim)
}
else{
alpha_tol[i,n_dim] <- alpha[[i]]
}
}
index <- which(alpha_tol==rep(1,n_dim))
if(!setequal(which(alpha_tol==rep(1,n_dim)), integer(0))){
alpha_tol <- alpha_tol[-index,]
}#for 2-dimensional case there is no 1 vector
valid_per[ii] <- nrow(alpha_tol)/30^3
}
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
mc
library(parallel)
clnum <- parallel::detectCores()
clnum
detectCores()
detectCores()
r2 <- seq(0.002,0.998,0.01)
valid_per <- rep(0,length(r2))
for(ii in 1:length(r2)){
r <- c(1, r2[ii], 0.00000001)
n_dim <- length(r)
if(n_dim == 3){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a))
}
alpha_1n <- split(alpha_tol, row(alpha_tol))
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
alpha <- parallel::mclapply(alpha_1n,alpha_kernel,r, sig.lv=0.025 ,mc.cores = mc)
alpha_tol <- cbind(alpha_tol, rep(0,(length(a))^(n_dim-1)))
for(i in 1:(length(a))^(n_dim-1)){
if (is.null(alpha[[i]])){
alpha_tol[i,] <- rep(1,n_dim)
}
else{
alpha_tol[i,n_dim] <- alpha[[i]]
}
}
index <- which(alpha_tol==rep(1,n_dim))
if(!setequal(which(alpha_tol==rep(1,n_dim)), integer(0))){
alpha_tol <- alpha_tol[-index,]
}#for 2-dimensional case there is no 1 vector
valid_per[ii] <- nrow(alpha_tol)/30^3
}
detectCores()
getOption("mc.cores", clnum)
for(ii in 1:length(r2)){
r <- c(1, r2[ii], 0.00000001)
n_dim <- length(r)
if(n_dim == 3){
a <- 1:100/4000.001
alpha_tol <- as.matrix(expand.grid(alpha1=a,alpha2=a))
}
alpha_1n <- split(alpha_tol, row(alpha_tol))
clnum <- parallel::detectCores()
mc <- getOption("mc.cores", clnum)
alpha <- parallel::mclapply(alpha_1n,alpha_kernel,r, sig.lv=0.025 ,mc.cores = mc)
alpha_tol <- cbind(alpha_tol, rep(0,(length(a))^(n_dim-1)))
for(i in 1:(length(a))^(n_dim-1)){
if (is.null(alpha[[i]])){
alpha_tol[i,] <- rep(1,n_dim)
}
else{
alpha_tol[i,n_dim] <- alpha[[i]]
}
}
index <- which(alpha_tol==rep(1,n_dim))
if(!setequal(which(alpha_tol==rep(1,n_dim)), integer(0))){
alpha_tol <- alpha_tol[-index,]
}#for 2-dimensional case there is no 1 vector
valid_per[ii] <- nrow(alpha_tol)/30^3
}
ii
detectCores()
detectCores()
